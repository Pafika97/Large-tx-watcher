# Large On-Chain Transfer Watcher (Arkham + Nansen -> Telegram)

Этот проект присылает в Telegram алерты, когда ОДНА транзакция перемещает сумму больше указанного порога (по умолчанию 10,000,000 USD). 
Источники данных — Arkham (WebSocket) и Nansen (REST polling). Форматы сообщений оставлены универсальными и легко адаптируются под ваш аккаунт/тариф.

## 1) Подготовка

1. Установите Python 3.10+
2. Склонируйте/скачайте папку проекта
3. Скопируйте `.env.example` в `.env` и заполните переменные:
   - `ARKHAM_WS_URL`, `ARKHAM_API_KEY` — если используете Arkham WebSocket
   - `NANSEN_REST_URL`, `NANSEN_API_KEY` — если используете Nansen REST
   - `TG_BOT_TOKEN`, `TG_CHAT_ID` — ваш телеграм-бот и чат/группа для алертов
   - `THRESHOLD_USD` — при необходимости измените порог (по умолчанию 10000000)
   - `POLL_INTERVAL` — интервал опроса REST (сек), если используете Nansen

## 2) Установка зависимостей

```bash
python -m venv venv
# Windows: venv\Scripts\activate
# Linux/Mac: source venv/bin/activate
pip install -r requirements.txt
```

## 3) Запуск

```bash
python main.py
```

- Если вы корректно указали переменные окружения, запустятся соответствующие фетчеры
  (Arkham WS и/или Nansen REST).
- Первое создание файла БД `seen_tx.db` произойдёт автоматически.

## 4) Проверка и логика

- Дедупликация по `txid` (SQLite таблица `seen_tx`).
- Если от провайдера приходит `usd_value`, используем его. Иначе считаем по цене из CoinGecko.
- Срабатывание алерта при `usd_value >= THRESHOLD_USD`.
- Сообщение в Telegram содержит: USD-цену, txid, chain, asset, amount, адреса, время (UTC).

## 5) Адаптация под фактические JSON’ы Arkham/Nansen

В `fetchers.py` функции `_process_msg` (Arkham) и `_process_tx` (Nansen) ожидают поля:
- `txid`, `chain`, `from`, `to`, `asset_symbol`, `amount`, `decimals`, `timestamp`, `usd_value` (опционально).

Если ваш провайдер отдаёт другие названия/структуры — просто поправьте маппинг:
- получите 1–2 реальные JSON-примера,
- замените соответствующие `get()` на правильные ключи,
- при необходимости — добавьте разбор полей токена/адреса/сети.

## 6) Полезные настройки

- В `.env` можно снизить порог (например, до 5_000_000) или повысить.
- Если нужен исторический курс на конкретный timestamp блока — замените `fetch_price_usd` на поставщика,
  который умеет `price_at_timestamp` (CoinAPI/Kaiko/Amberdata и т.д.).

## 7) Проблемы и решения

- **Нет сообщений**: Убедитесь, что ключи и URL прописаны, а у бота Telegram есть права писать в чат.
- **Ошибка Telegram**: проверьте `TG_BOT_TOKEN` и `TG_CHAT_ID`.
- **Ошибка WebSocket/REST**: уточните конечные точки/заголовки авторизации по документации вашего тарифа.
- **Ограничения CoinGecko**: при частых запросах используйте свой кеш/тайм-ауты или платного провайдера.

Готово. Пришлите пример реального события от Arkham/Nansen — помогу точно подогнать парсер полей.
